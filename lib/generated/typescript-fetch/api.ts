/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * Medium API
 * Medium API
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "https://api.medium.com".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError"
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}


/**
 * DefaultApi - fetch parameter creator
 * @export
 */
export const DefaultApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get current user profile
         * @param {string} accessToken integration token which you can access through your settings page at https://medium.com/me/settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MeGet(accessToken: string, options: any = {}): FetchArgs {
            // verify required parameter 'accessToken' is not null or undefined
            if (accessToken === null || accessToken === undefined) {
                throw new RequiredError('accessToken','Required parameter accessToken was null or undefined when calling v1MeGet.');
            }
            const localVarPath = `/v1/me`;
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accessToken !== undefined) {
                localVarQueryParameter['accessToken'] = accessToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} accessToken integration token which you can access through your settings page at https://medium.com/me/settings
         * @param {string} publicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PublicationsPublicationIdContributorsGet(accessToken: string, publicationId: string, options: any = {}): FetchArgs {
            // verify required parameter 'accessToken' is not null or undefined
            if (accessToken === null || accessToken === undefined) {
                throw new RequiredError('accessToken','Required parameter accessToken was null or undefined when calling v1PublicationsPublicationIdContributorsGet.');
            }
            // verify required parameter 'publicationId' is not null or undefined
            if (publicationId === null || publicationId === undefined) {
                throw new RequiredError('publicationId','Required parameter publicationId was null or undefined when calling v1PublicationsPublicationIdContributorsGet.');
            }
            const localVarPath = `/v1/publications/{publicationId}/contributors`
                .replace(`{${"publicationId"}}`, encodeURIComponent(String(publicationId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accessToken !== undefined) {
                localVarQueryParameter['accessToken'] = accessToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get a list of publications for a given user
         * @param {string} accessToken integration token which you can access through your settings page at https://medium.com/me/settings
         * @param {string} userId not a user handle, find yours from /v1/me response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersUserIdPublicationsGet(accessToken: string, userId: string, options: any = {}): FetchArgs {
            // verify required parameter 'accessToken' is not null or undefined
            if (accessToken === null || accessToken === undefined) {
                throw new RequiredError('accessToken','Required parameter accessToken was null or undefined when calling v1UsersUserIdPublicationsGet.');
            }
            // verify required parameter 'userId' is not null or undefined
            if (userId === null || userId === undefined) {
                throw new RequiredError('userId','Required parameter userId was null or undefined when calling v1UsersUserIdPublicationsGet.');
            }
            const localVarPath = `/v1/users/{userId}/publications`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            const localVarRequestOptions = Object.assign({ method: 'GET' }, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (accessToken !== undefined) {
                localVarQueryParameter['accessToken'] = accessToken;
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get current user profile
         * @param {string} accessToken integration token which you can access through your settings page at https://medium.com/me/settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MeGet(accessToken: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).v1MeGet(accessToken, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @param {string} accessToken integration token which you can access through your settings page at https://medium.com/me/settings
         * @param {string} publicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PublicationsPublicationIdContributorsGet(accessToken: string, publicationId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).v1PublicationsPublicationIdContributorsGet(accessToken, publicationId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * Get a list of publications for a given user
         * @param {string} accessToken integration token which you can access through your settings page at https://medium.com/me/settings
         * @param {string} userId not a user handle, find yours from /v1/me response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersUserIdPublicationsGet(accessToken: string, userId: string, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Response> {
            const localVarFetchArgs = DefaultApiFetchParamCreator(configuration).v1UsersUserIdPublicationsGet(accessToken, userId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response;
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * Get current user profile
         * @param {string} accessToken integration token which you can access through your settings page at https://medium.com/me/settings
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MeGet(accessToken: string, options?: any) {
            return DefaultApiFp(configuration).v1MeGet(accessToken, options)(fetch, basePath);
        },
        /**
         * 
         * @param {string} accessToken integration token which you can access through your settings page at https://medium.com/me/settings
         * @param {string} publicationId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PublicationsPublicationIdContributorsGet(accessToken: string, publicationId: string, options?: any) {
            return DefaultApiFp(configuration).v1PublicationsPublicationIdContributorsGet(accessToken, publicationId, options)(fetch, basePath);
        },
        /**
         * Get a list of publications for a given user
         * @param {string} accessToken integration token which you can access through your settings page at https://medium.com/me/settings
         * @param {string} userId not a user handle, find yours from /v1/me response
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1UsersUserIdPublicationsGet(accessToken: string, userId: string, options?: any) {
            return DefaultApiFp(configuration).v1UsersUserIdPublicationsGet(accessToken, userId, options)(fetch, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * Get current user profile
     * @param {} accessToken integration token which you can access through your settings page at https://medium.com/me/settings
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public v1MeGet(accessToken: string, options?: any) {
        return DefaultApiFp(this.configuration).v1MeGet(accessToken, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @param {} accessToken integration token which you can access through your settings page at https://medium.com/me/settings
     * @param {} publicationId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public v1PublicationsPublicationIdContributorsGet(accessToken: string, publicationId: string, options?: any) {
        return DefaultApiFp(this.configuration).v1PublicationsPublicationIdContributorsGet(accessToken, publicationId, options)(this.fetch, this.basePath);
    }

    /**
     * Get a list of publications for a given user
     * @param {} accessToken integration token which you can access through your settings page at https://medium.com/me/settings
     * @param {} userId not a user handle, find yours from /v1/me response
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public v1UsersUserIdPublicationsGet(accessToken: string, userId: string, options?: any) {
        return DefaultApiFp(this.configuration).v1UsersUserIdPublicationsGet(accessToken, userId, options)(this.fetch, this.basePath);
    }

}

